{"version":3,"sources":["hooks/useLocalStorageState.js","hooks/useTodoState.js","hooks/useToggleState.js","hooks/useInputState.js","EditTodoForm.js","Todo.js","TodoList.js","TodoForm.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorageState","key","defaultValue","useState","val","JSON","parse","window","localStorage","getItem","String","e","state","setState","useEffect","setItem","stringify","useTodoState","initialTodos","todos","setTodos","addTodo","newTodoText","id","uuid","task","completed","removeTodo","todoId","updatedTodos","filter","todo","toggleTodo","map","editTodo","newTask","useToggleState","initialValue","toggle","value","setValue","target","EditTodoForm","toggleEditing","useInputState","handleChange","reset","onSubmit","preventDefault","style","marginLeft","width","TextField","margin","onChange","fullWidth","autoFocus","Todo","isEditing","ListItem","height","Checkbox","tabIndex","checked","onClick","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","TodoList","length","Paper","List","i","Divider","TodoForm","padding","label","TodoApp","backgroundColor","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea9e7474.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst useLocalStorageState = (key, defaultValue) => {\r\n  // make piece of sate, based off of value in localStorage\r\n  const [state, setState] = useState(() => {\r\n    let val;\r\n    try {\r\n      val = JSON.parse(\r\n        window.localStorage.getItem(key) || String(defaultValue)\r\n      );\r\n    } catch (e) {\r\n      val = defaultValue;\r\n    }\r\n    return val;\r\n  });\r\n\r\n  // use useEffect to update localStorage when state changes\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state));\r\n  }, [state, key]);\r\n\r\n  return [state, setState];\r\n};\r\n\r\nexport default useLocalStorageState;\r\n","import useLocalStorageState from \"./useLocalStorageState\";\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nconst useTodoState = (initialTodos) => {\r\n  const [todos, setTodos] = useLocalStorageState(\"todos\", initialTodos);\r\n\r\n  return {\r\n    todos,\r\n    addTodo: (newTodoText) => {\r\n      setTodos([...todos, { id: uuid(), task: newTodoText, completed: false }]);\r\n    },\r\n    removeTodo: (todoId) => {\r\n      // filter out removed todo\r\n      const updatedTodos = todos.filter((todo) => todo.id !== todoId);\r\n      // setTodos with the updatedTodos\r\n      setTodos(updatedTodos);\r\n    },\r\n    toggleTodo: (todoId) => {\r\n      const updatedTodos = todos.map((todo) =>\r\n        todo.id === todoId ? { ...todo, completed: !todo.completed } : todo\r\n      );\r\n      setTodos(updatedTodos);\r\n    },\r\n    editTodo: (todoId, newTask) => {\r\n      const updatedTodos = todos.map((todo) =>\r\n        todo.id === todoId ? { ...todo, task: newTask } : todo\r\n      );\r\n      setTodos(updatedTodos);\r\n    },\r\n  };\r\n};\r\n\r\nexport default useTodoState;\r\n","import { useState } from \"react\";\r\n\r\nconst useToggleState = (initialValue = false) => {\r\n  const [state, setState] = useState(initialValue);\r\n  const toggle = () => {\r\n    setState(!state);\r\n  };\r\n  return [state, toggle];\r\n};\r\n\r\nexport default useToggleState;\r\n","import { useState } from \"react\";\r\n\r\nexport default (initialValue) => {\r\n  const [value, setValue] = useState(initialValue);\r\n  const handleChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n  const reset = () => {\r\n    setValue(\"\");\r\n  };\r\n  return [value, handleChange, reset];\r\n};\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport useInputState from \"./hooks/useInputState\";\r\n\r\nconst EditTodoForm = ({ id, editTodo, task, toggleEditing }) => {\r\n  const [value, handleChange, reset] = useInputState(task);\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        editTodo(id, value);\r\n        reset();\r\n        toggleEditing();\r\n      }}\r\n      style={{\r\n        marginLeft: \"1rem\",\r\n        width: \"50%\",\r\n      }}\r\n    >\r\n      <TextField\r\n        margin=\"normal\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        fullWidth\r\n        autoFocus\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default EditTodoForm;\r\n","import React from \"react\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport useToggleState from \"./hooks/useToggleState\";\r\nimport EditTodoForm from \"./EditTodoForm\";\r\n\r\nconst Todo = ({ id, task, completed, removeTodo, toggleTodo, editTodo }) => {\r\n  const [isEditing, toggleEditing] = useToggleState(false);\r\n\r\n  return (\r\n    <ListItem style={{ height: \"64px\" }}>\r\n      {isEditing ? (\r\n        <EditTodoForm\r\n          editTodo={editTodo}\r\n          id={id}\r\n          task={task}\r\n          toggleEditing={toggleEditing}\r\n        />\r\n      ) : (\r\n        <>\r\n          <Checkbox\r\n            tabIndex={-1}\r\n            checked={completed}\r\n            onClick={() => toggleTodo(id)}\r\n          />\r\n          <ListItemText\r\n            style={{ textDecoration: completed ? \"line-through\" : \"none\" }}\r\n          >\r\n            {task}\r\n          </ListItemText>\r\n          <ListItemSecondaryAction>\r\n            <IconButton onClick={() => removeTodo(id)}>\r\n              <DeleteIcon />\r\n            </IconButton>\r\n            <IconButton onClick={toggleEditing}>\r\n              <EditIcon />\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </>\r\n      )}\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Todo from \"./Todo\";\r\n\r\nconst TodoList = ({ todos, removeTodo, toggleTodo, editTodo }) => {\r\n  if (todos.length) {\r\n    return (\r\n      <Paper>\r\n        <List>\r\n          {todos.map((todo, i) => (\r\n            <>\r\n              {/* Wrapped in a JSX Fragment */}\r\n              <Todo\r\n                {...todo}\r\n                key={todo.id}\r\n                removeTodo={removeTodo}\r\n                toggleTodo={toggleTodo}\r\n                editTodo={editTodo}\r\n              />\r\n              {i !== todos.length - 1 && <Divider />}\r\n            </>\r\n          ))}\r\n        </List>\r\n      </Paper>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default TodoList;\r\n","import Paper from \"@material-ui/core/Paper\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport React from \"react\";\r\nimport useInputState from \"./hooks/useInputState\";\r\n\r\nconst TodoForm = ({ addTodo }) => {\r\n  const [value, handleChange, reset] = useInputState(\"\");\r\n\r\n  return (\r\n    <Paper\r\n      style={{\r\n        margin: \"1rem 0\",\r\n        padding: \"0 1rem 1rem 1rem\",\r\n      }}\r\n    >\r\n      <form\r\n        onSubmit={(e) => {\r\n          e.preventDefault();\r\n          addTodo(value);\r\n          reset();\r\n        }}\r\n      >\r\n        <TextField\r\n          value={value}\r\n          onChange={handleChange}\r\n          margin=\"normal\"\r\n          label=\"Add New Todo\"\r\n          fullWidth\r\n        />\r\n      </form>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default TodoForm;\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport useTodoState from \"./hooks/useTodoState\";\r\nimport TodoList from \"./TodoList\";\r\nimport TodoForm from \"./TodoForm\";\r\n\r\nconst TodoApp = () => {\r\n  const initialTodos = [\r\n    { id: 1, task: \"Exercise\", completed: false },\r\n    { id: 2, task: \"Cook Lunch\", completed: true },\r\n    { id: 3, task: \"Sleep at 10AM\", completed: false },\r\n  ];\r\n\r\n  const { todos, addTodo, removeTodo, toggleTodo, editTodo } = useTodoState(\r\n    initialTodos\r\n  );\r\n\r\n  return (\r\n    <Paper\r\n      style={{\r\n        padding: 0,\r\n        margin: 0,\r\n        height: \"100vh\",\r\n        backgroundColor: \"#fafafa\",\r\n      }}\r\n      elevation={0}\r\n    >\r\n      <AppBar color=\"primary\" position=\"static\" style={{ height: \"64px\" }}>\r\n        <Toolbar>\r\n          <Typography color=\"inherit\">TODOS WITH REACT HOOKS</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Grid container justify=\"center\" style={{ marginTop: \"1rem\" }}>\r\n        <Grid item xs={11} md={8} lg={4}>\r\n          <TodoForm addTodo={addTodo} />\r\n          <TodoList\r\n            todos={todos}\r\n            removeTodo={removeTodo}\r\n            toggleTodo={toggleTodo}\r\n            editTodo={editTodo}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default TodoApp;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoApp from \"./TodoApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}